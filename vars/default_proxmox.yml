---
# Default Example Configuration

name: default

# Domain settings
domain: {
  name: example.com,
  dns_servers: [
    "<server_ip_address>"
  ]
}

# Cloudflare
cloudflare: {
  email: user@example.com,
  api_key: <cloudflare_api_key>,
  zone_id: <cloudflare_zon_id>,
}

# Digital Ocean
digital_ocean: {
  api_key: <digital_ocean_api_key>,
}

# Default user Settings
default_user: {
  name: deploy,
  email: user@example.com,
  password: yo78ce971320a46670dc0115,
  ssh_public_key: "ssh-rsa ...",
  user_groups: sudo,
  passwordless_sudo: yes,
  authorized_keys: [
    { path: "https://github.com/<username>.keys", state: "present" }
  ]
}

# Proxmox Virtual Environment
proxmox: {
  nodes: {
    pve: {
      name: "<node_name>",
      hostname: "<proxmox_node_host>",
      time_zone: "America/New_York",
      ssh: {
        username: root,
        hostname: "<proxmox_node_host>",
        port: 22
      },
      api: {
        tls_insecure: true,
        url: "https://<proxmox_node_host>:8006",
        username: "root@pam",
        password: "<password>",
        otp: "",
      },
      vfio_pci: {
        # Add GPU to vfio-pci driver
        ## Get Vendor IDs for GPU and Audio Bus
        ## lspci -v # > 01:00.0 VGA controller 01:00.1 Audio Device
        ## lspci -ns 01:00 # > 1234:1234, 1234:1234
        ids: []
      }
    }
  },
}

# Packer - Proxmox example configuration
packer: {
  centos: {
    7: {
      version: 7,
      description: "CentOS 7 Minimal 1908 (generated by Packer)",
      name: "centos-7-x86-64-minimal-1908-template",
      id: 4003,
      memory: 4048,
      sockets: 1,
      cores: 6,
      os: "l26",
      scsi_controller: "virtio-scsi-pci",
      iso_file: "nfs-ax:iso/centos-7-x86-64-minimal-1908.iso",
      time_zone: "UTC",
      disk: [
          {
          type: "scsi",
          disk_size: "30G",
          storage_pool: "local-lvm",
          storage_pool_type: "lvm-thin",
          format: "raw",
        }
      ]
    }
  },
  ubuntu: {
    bionic: {
      version: 18.04.4,
      description: "Ubuntu 18-04-4 (generated by Packer)",
      name: "ubuntu-18-04-4-server-amd64-template",
      id: 4002,
      memory: 2048,
      sockets: 1,
      cores: 6,
      os: "l26",
      scsi_controller: "virtio-scsi-pci",
      iso_file: "nfs-ax:iso/ubuntu-18-04-4-server-amd64.iso",
      # iso_download_url:
      # iso_checksum:
      # iso_storage:
      time_zone: "UTC",
      disk: [
        {
          type: "scsi",
          disk_size: "30G",
          storage_pool: "local-lvm",
          storage_pool_type: "lvm-thin",
          format: "raw",
        }
      ]
    }
  }
}

# Digital Ocean - Bastion Host configuration
bastion: {
  image: "ubuntu-19-10-x64",
  name: "bastion",
  region: "nyc3",
  size: "s-1vcpu-1gb",
  # SSH Connection configuration
  ssh: {
    firewall_rules: yes,
    root_acc_access: no,
    password_auth: no,
    access_port: <ssh_access_port>,
  },
  # Firewall rules
  ufw: {
    state: enabled,
    rules: [
      { rule: allow, port: '80', proto: tcp },
      { rule: allow, port: '443', proto: tcp },
    ]
  },
  # Docker containers
  docker: {
    traefik: {
      name: "traefik",
      dashboard_hostname: "traefik.example.com",
      default_auth: [
        "example:$apr1$1Xzc2x8g$EJlSp2ehf4itpwSKAUZUY1", # basic htpasswd -nb example example
      ],
    },
    # https://docs.drone.io/server/overview/
    drone: {
      name: "drone",
      rpc_secret: "<some_secret>",
      hostname: "drone.example.com",
      # https://github.com/settings/developers
      github_client_id: <client_id>,
      github_client_secret: <client_secret>,
      user_filter: username,
      user_admin: username,
    },
    registry: {
      name: "registry",
      hostname: "registry.example.com",
    }
  },
}

# Consul cluster settings
consul: {
  # Default consul server
  default: {
    domain_name: example.com,
    data_center: example,
    host: "<server_ip_address>",
    port: 8500,
    scheme: http,
    encrypt_key: <secret_key>,
  },
  # Data Centers
  devset: {
    name: example,
    encrypt_key: <secret_key>,
    servers: [
      {
        host: "<server_ip_address>",
        port: 8500,
        scheme: http,
      }
    ],
    auth: {
      username: '',
      password: '',
    },
  }
}

# Proxmox LXC Containers - Example configuration
lxc: {
  # Folder where to store LXC data
  storage_path: /mnt/lxc,
  # Bind9 DNS Server LXC Container
  bind: {
    container_name: "bind",
    hostname: "bind.example.com",
    cert_resolver: "cloudflare",
    node_name: "<proxmox_node_name>",
    memory: {
      dedicated: 2048,
      swap: 1024,
    },
    network: {
      name: "eth0",
      mac_address: "<mac_address>",
    },
    # Requires static IP address
    ip_config: {
      ipv4: {
        address: "<host_ip>/24",
        gateway: "<host_gateway>",
      }
    },
    provisioner: {
      bind_forwarders: ["1.1.1.1"],
      bind_dns_keys: [
        {
          name: "master_key",
          algorithm: "hmac-sha256",
          # secret can be generated using: dnssec-keygen -a hmac-sha256 -b 128 -n HOST example.com
          secret: "P6AQJ7u6IUDi+oJcambPiA",
        },
      ],
      bind_zone_domains: [
        {
          name: "example.com",
          create_reverse_zones: false,
          allow_update: ["key \"master_key\""],
        },
      ],
      # DNS Over HTTPS Upstream servers
      doh_server_upstream_servers: ["udp:127.0.0.1:53"],
    }
  },
  # Consul LXC Container
  consul: {
    container_name: "consul",
    hostname: "consul.example.com",
    cert_resolver: "cloudflare",
    node_name: "<proxmox_node_name>",
    memory: {
      dedicated: 2048,
      swap: 1024,
    },
    network: {
      name: "eth0",
      mac_address: "<mac_address>",
    },
    # Requires static IP
    ip_config: {
      ipv4: {
        address: "<host_ip>/24",
        gateway: "<host_gateway>",
      }
    },
    mounts: [
      "/mnt/lxc/var/consul/:/var/consul",
    ],
  },
  # Traefik LXC Container
  traefik: {
    hostname: "traefik.example.com",
    container_name: "traefik",
    node_name: "<proxmox_node_name>",
    memory: {
      dedicated: 2048,
      swap: 1024,
    },
    mounts: [
      "/mnt/lxc/traefik:/opt/traefik",
    ],
  },
  # Bitwarden LXC Container
  bitwarden: {
    node_name: "<proxmox_node_name>",
    container_name: "bitwarden",
    hostname: "bitwarden.example.com",
    cert_resolver: "cloudflare",
    memory: {
      dedicated: 2048,
      swap: 1024,
    },
    mounts: [
      "/mnt/lxc/bitwarden/opt/bitwardenrs/:/opt/bitwardenrs",
    ],
    features: "fuse=1,nesting=1",
    # Low level lxc configuration
    lxc_cfg: [
      "lxc.apparmor.profile: unconfined",
      "lxc.cgroup.devices.allow: a",
      "lxc.cap.drop:",
    ],
    # Docker inside lxc requires those modules enabled on the host
    host_kernel_modules: [
      aufs,
      overlay,
    ]
  },
  # PiHole LXC container
  pihole: {
    hostname: "pihole.example.com",
    container_name: pihole,
    node_name: "<proxmox_node_name>",
    cert_resolver: cloudflare,
    memory: {
      dedicated: 2048,
      swap: 1024,
    },
    provisioner: {
      conditional_forwarding: true,
      conditional_forwarding_ip: "192.168.88.1", # Local router IP address
      conditional_forwarding_domain: example.com,
      conditional_forwarding_reverse: 88.168.192.in-addr.arpa,
      network: {
        dns_servers: [
          "1.1.1.1#53",
        ]
      },
      webui_password: "<some_secret_password>",
    },
  },
  # Jellyfin LXC Container
  jellyfin: {
    node_name: "<proxmox_node_name>",
    container_name: jellyfin,
    hostname: "jellyfin.example.com",
    cert_resolver: "cloudflare",
    memory: {
      dedicated: 4096,
      swap: 1024,
    },
    mounts: [
      "/mnt/lxc/jellyfin/lib:/var/lib/jellyfin/",
      "/mnt/lxc/jellyfin/etc:/etc/jellyfin",
      "/mnt/lxc/jellyfin/cache:/var/cache/jellyfin",
      "/mnt/lxc/jellyfin/log:/var/log/jellyfin",
      "/mnt/share/:/mnt/local",
    ],
    features: "fuse=1,mount=nfs",
    lxc_cfg: [
      "lxc.autodev: 1",
      # Allow video groups to be accessed from the container
      "lxc.cgroup.devices.allow: c 195:* rwm",
      "lxc.cgroup.devices.allow: c 236:* rwm",
      "lxc.cgroup.devices.allow: c 226:* rwm",
      # Mount video devices
      "lxc.mount.entry: /dev/dri/card0 /dev/dri/card0 none bind,optional,create=file",
      "lxc.mount.entry: /dev/dri/renderD128 /dev/dri/renderD128 none bind,optional,create=file",
    ],
  },
  # Plex LXC Container
  plex: {
    node_name: "<proxmox_node_name>",
    container_name: plex,
    hostname: "plex.example.com",
    memory: {
      dedicated: 4096,
      swap: 1024,
    },
    cert_resolver: cloudflare,
    mounts: [
      "/mnt/lxc/plex:/var/lib/plexmediaserver/",
      "/mnt/share/:/mnt/local",
    ],
    features: "fuse=1,mount=nfs",
    lxc_cfg: [
      "lxc.autodev: 1",
      # Allow video groups to be accessed from the container
      "lxc.cgroup.devices.allow: c 195:* rwm",
      "lxc.cgroup.devices.allow: c 236:* rwm",
      "lxc.cgroup.devices.allow: c 226:* rwm",
      # Mount video devices
      "lxc.mount.entry: /dev/dri/card0 /dev/dri/card0 none bind,optional,create=file",
      "lxc.mount.entry: /dev/dri/renderD128 /dev/dri/renderD128 none bind,optional,create=file",
    ],
    provisioner: {
      plex_username: <plex_tv_email>,
      plex_password: <plex_tv_password>,
      plex_server_name: <plex_server_name>,
    }
  },
  # LocalStack LXC Container
  localstack: {
    node_name: "<proxmox_node_name>",
    container_name: "aws",
    hostname: "aws.example.com",
    hostname_endpoint: "nyc-1.aws.example.app",
    cert_resolver: "cloudflare",
    memory: {
      dedicated: 2048,
      swap: 1024,
    },
    features: "fuse=1,nesting=1",
    lxc_cfg: [
      "lxc.apparmor.profile: unconfined",
      "lxc.cgroup.devices.allow: a",
      "lxc.cap.drop:",
    ],
    # Docker inside lxc requires those modules enabled on the host
    host_kernel_modules: [
      aufs,
      overlay,
    ]
  },
  # Home Assistant LXC Container
  hass: {
    node_name: "<proxmox_node_name>",
    container_name: "hass",
    hostname: "hass.example.com",
    cert_resolver: "cloudflare",
    memory: {
      dedicated: 2048,
      swap: 1024,
    },
    mounts: [
      "/mnt/lxc/hass/root/.homeassistant/:/root/.homeassistant/",
    ]
  },
}